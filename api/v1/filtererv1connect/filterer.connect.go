// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/v1/filterer.proto

package filtererv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/lopezator/filterer/api/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// FiltererServiceName is the fully-qualified name of the FiltererService service.
	FiltererServiceName = "lopezator.filterer.v1.FiltererService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// FiltererServiceFilterProcedure is the fully-qualified name of the FiltererService's Filter RPC.
	FiltererServiceFilterProcedure = "/lopezator.filterer.v1.FiltererService/Filter"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	filtererServiceServiceDescriptor      = v1.File_api_v1_filterer_proto.Services().ByName("FiltererService")
	filtererServiceFilterMethodDescriptor = filtererServiceServiceDescriptor.Methods().ByName("Filter")
)

// FiltererServiceClient is a client for the lopezator.filterer.v1.FiltererService service.
type FiltererServiceClient interface {
	// Filter does the filterer magic!
	Filter(context.Context, *connect.Request[v1.FilterRequest]) (*connect.Response[v1.FilterResponse], error)
}

// NewFiltererServiceClient constructs a client for the lopezator.filterer.v1.FiltererService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewFiltererServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) FiltererServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &filtererServiceClient{
		filter: connect.NewClient[v1.FilterRequest, v1.FilterResponse](
			httpClient,
			baseURL+FiltererServiceFilterProcedure,
			connect.WithSchema(filtererServiceFilterMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// filtererServiceClient implements FiltererServiceClient.
type filtererServiceClient struct {
	filter *connect.Client[v1.FilterRequest, v1.FilterResponse]
}

// Filter calls lopezator.filterer.v1.FiltererService.Filter.
func (c *filtererServiceClient) Filter(ctx context.Context, req *connect.Request[v1.FilterRequest]) (*connect.Response[v1.FilterResponse], error) {
	return c.filter.CallUnary(ctx, req)
}

// FiltererServiceHandler is an implementation of the lopezator.filterer.v1.FiltererService service.
type FiltererServiceHandler interface {
	// Filter does the filterer magic!
	Filter(context.Context, *connect.Request[v1.FilterRequest]) (*connect.Response[v1.FilterResponse], error)
}

// NewFiltererServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewFiltererServiceHandler(svc FiltererServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	filtererServiceFilterHandler := connect.NewUnaryHandler(
		FiltererServiceFilterProcedure,
		svc.Filter,
		connect.WithSchema(filtererServiceFilterMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/lopezator.filterer.v1.FiltererService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case FiltererServiceFilterProcedure:
			filtererServiceFilterHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedFiltererServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedFiltererServiceHandler struct{}

func (UnimplementedFiltererServiceHandler) Filter(context.Context, *connect.Request[v1.FilterRequest]) (*connect.Response[v1.FilterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("lopezator.filterer.v1.FiltererService.Filter is not implemented"))
}
