// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: lopezator/filterer/v1/filterer.proto

package filterer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FiltererService_Filter_FullMethodName = "/lopezator.filterer.v1.FiltererService/Filter"
)

// FiltererServiceClient is the client API for FiltererService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FiltererServiceClient interface {
	// Filter does the filterer magic!
	Filter(ctx context.Context, in *FilterRequest, opts ...grpc.CallOption) (*FilterResponse, error)
}

type filtererServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFiltererServiceClient(cc grpc.ClientConnInterface) FiltererServiceClient {
	return &filtererServiceClient{cc}
}

func (c *filtererServiceClient) Filter(ctx context.Context, in *FilterRequest, opts ...grpc.CallOption) (*FilterResponse, error) {
	out := new(FilterResponse)
	err := c.cc.Invoke(ctx, FiltererService_Filter_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FiltererServiceServer is the server API for FiltererService service.
// All implementations should embed UnimplementedFiltererServiceServer
// for forward compatibility
type FiltererServiceServer interface {
	// Filter does the filterer magic!
	Filter(context.Context, *FilterRequest) (*FilterResponse, error)
}

// UnimplementedFiltererServiceServer should be embedded to have forward compatible implementations.
type UnimplementedFiltererServiceServer struct {
}

func (UnimplementedFiltererServiceServer) Filter(context.Context, *FilterRequest) (*FilterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Filter not implemented")
}

// UnsafeFiltererServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FiltererServiceServer will
// result in compilation errors.
type UnsafeFiltererServiceServer interface {
	mustEmbedUnimplementedFiltererServiceServer()
}

func RegisterFiltererServiceServer(s grpc.ServiceRegistrar, srv FiltererServiceServer) {
	s.RegisterService(&FiltererService_ServiceDesc, srv)
}

func _FiltererService_Filter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FiltererServiceServer).Filter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FiltererService_Filter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FiltererServiceServer).Filter(ctx, req.(*FilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FiltererService_ServiceDesc is the grpc.ServiceDesc for FiltererService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FiltererService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lopezator.filterer.v1.FiltererService",
	HandlerType: (*FiltererServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Filter",
			Handler:    _FiltererService_Filter_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lopezator/filterer/v1/filterer.proto",
}
